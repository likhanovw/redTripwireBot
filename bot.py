import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from config import BOT_TOKEN

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TripwireBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """Setup all command and callback handlers"""
        # Command handlers
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        
        # Callback query handler for button clicks
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command"""
        user = update.effective_user
        welcome_message = f"–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        
        # Create inline keyboard with options
        keyboard = [
            [InlineKeyboardButton("–ï—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="has_product")],
            [InlineKeyboardButton("–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∞", callback_data="no_product")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_message, reply_markup=reply_markup)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /help command"""
        help_text = """
ü§ñ **TripwireBot Help**

**Available Commands:**
/start - Start the bot and see available options
/help - Show this help message

**How to use:**
1. Click "Start" to begin
2. Choose an option from the buttons
3. The bot will send you the requested PDF file

**Need more help?** Contact the bot administrator.
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle button callbacks"""
        query = update.callback_query
        await query.answer()  # Answer the callback query
        
        if query.data == "has_product":
            # Create new keyboard for "–ï—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç" options
            keyboard = [
                [InlineKeyboardButton("–°–≤–æ—è –∫–æ–º–∞–Ω–¥–∞", callback_data="own_team")],
                [InlineKeyboardButton("–ê—É—Ç—Å—Ç–∞—Ñ—Ñ", callback_data="outstaff")],
                [InlineKeyboardButton("–ê—É—Ç—Å–æ—Ä—Å", callback_data="outsource")],
                [InlineKeyboardButton("–ù–µ—Ç –Ω–∏–∫–æ–≥–æ", callback_data="no_team")],
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("‚úÖ –ï—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç: –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é", reply_markup=reply_markup)
            return
        elif query.data == "no_product":
            # Create new keyboard for "–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∞" options
            keyboard = [
                [InlineKeyboardButton("–ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∞–º–∏", callback_data="fully_own")],
                [InlineKeyboardButton("–°–∞–º–∏ + —É—Å–∏–ª–µ–Ω–∏–µ –∏–∑–≤–Ω–µ", callback_data="own_plus_external")],
                [InlineKeyboardButton("–ó–∞–∫–∞–∑–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", callback_data="custom_development")],
                [InlineKeyboardButton("–ü–æ–∫—É–ø–∫–∞ –≥–æ—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–µ–π", callback_data="buy_customize")],
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("‚ùå –ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é", reply_markup=reply_markup)
            return
        elif query.data == "back_to_start":
            # Return to the main start menu
            keyboard = [
                [InlineKeyboardButton("–ï—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="has_product")],
                [InlineKeyboardButton("–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∞", callback_data="no_product")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", reply_markup=reply_markup)
            return
        elif query.data == "own_team":
            # Create new keyboard for "own_team" options
            keyboard = [
                [InlineKeyboardButton("–ê—É–¥–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ + —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø—Ä–æ–¥–∂–µ–∫—Ç–∞", callback_data="audit_processes")],
                [InlineKeyboardButton("–ê—É–¥–∏—Ç –ø—Ä–æ–¥—É–∫—Ç–∞ + —Ä–µ–∫–æ–º–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–∫—Ç–∞", callback_data="audit_product")],
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_has_product")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("üë• –°–≤–æ—è –∫–æ–º–∞–Ω–¥–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é", reply_markup=reply_markup)
            return
        elif query.data in ["outstaff", "outsource", "no_team"]:
            # Handle the other team options
            responses = {
                "outstaff": "üë®‚Äçüíº –ê—É—Ç—Å—Ç–∞—Ñ—Ñ: –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é",
                "outsource": "üè¢ –ê—É—Ç—Å–æ—Ä—Å: –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é",
                "no_team": "üö´ –ù–µ—Ç –Ω–∏–∫–æ–≥–æ: –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é"
            }
            await query.edit_message_text(responses[query.data])
            return
        elif query.data == "back_to_has_product":
            # Return to the "–ï—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç" menu
            keyboard = [
                [InlineKeyboardButton("–°–≤–æ—è –∫–æ–º–∞–Ω–¥–∞", callback_data="own_team")],
                [InlineKeyboardButton("–ê—É—Ç—Å—Ç–∞—Ñ—Ñ", callback_data="outstaff")],
                [InlineKeyboardButton("–ê—É—Ç—Å–æ—Ä—Å", callback_data="outsource")],
                [InlineKeyboardButton("–ù–µ—Ç –Ω–∏–∫–æ–≥–æ", callback_data="no_team")],
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("‚úÖ –ï—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç: –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é", reply_markup=reply_markup)
            return
        elif query.data in ["audit_processes", "audit_product"]:
            # Handle the audit options - send PDF files
            pdf_files = {
                "audit_processes": "audit_processes.pdf",
                "audit_product": "audit_product.pdf"
            }
            
            if query.data in pdf_files:
                filename = pdf_files[query.data]
                try:
                    # Import PDF handler and send the file
                    from pdf_handler import PDFHandler
                    pdf_handler = PDFHandler()
                    await pdf_handler.send_pdf(update, context, filename)
                except Exception as e:
                    logger.error(f"Error sending PDF {filename}: {e}")
                    await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {filename}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        elif query.data in ["fully_own", "own_plus_external", "custom_development", "buy_customize"]:
            # Handle the no product options
            responses = {
                "fully_own": "üõ†Ô∏è –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–∞–º–∏: –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é",
                "own_plus_external": "üîß –°–∞–º–∏ + —É—Å–∏–ª–µ–Ω–∏–µ –∏–∑–≤–Ω–µ: –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é",
                "custom_development": "üìã –ó–∞–∫–∞–∑–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é",
                "buy_customize": "üõí –ü–æ–∫—É–ø–∫–∞ –≥–æ—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–µ–π: –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é"
            }
            await query.edit_message_text(responses[query.data])
            return
    
    def run(self):
        """Start the bot"""
        logger.info("Starting TripwireBot...")
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    bot = TripwireBot()
    bot.run() 