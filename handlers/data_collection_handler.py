import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ForceReply
from telegram.ext import ContextTypes
from datetime import datetime

logger = logging.getLogger(__name__)

class DataCollectionHandler:
    """Handler for user data collection with consent"""
    
    def __init__(self, data_manager):
        self.data_manager = data_manager
    
    async def request_initial_consent(self, update, context):
        """Request initial consent when user first starts the bot"""
        consent_text = """
üìã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!

–î–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É—Å–ª—É–≥ –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
‚Ä¢ –ò–º—è
‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞

–î–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º –≤–∏–¥–µ –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤—è–∑–∏ —Å –≤–∞–º–∏.

–°–æ–≥–ª–∞—Å–Ω—ã –ª–∏ –≤—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?
        """
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="consent_yes")],
            [InlineKeyboardButton("‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="consent_no")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(consent_text, reply_markup=reply_markup)
    
    async def request_consent(self, query, context):
        """Request permission to process personal data"""
        consent_text = """
üìã –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

–î–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥ –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
‚Ä¢ –ò–º—è
‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞  
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ

–î–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º –≤–∏–¥–µ –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤—è–∑–∏ —Å –≤–∞–º–∏.

–°–æ–≥–ª–∞—Å–Ω—ã –ª–∏ –≤—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?
        """
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="consent_yes")],
            [InlineKeyboardButton("‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="consent_no")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # Check if the message has a document (PDF) - can't edit those
        if query.message.document:
            # PDF message - send new message instead of editing
            await context.bot.send_message(
                chat_id=query.from_user.id,
                text=consent_text,
                reply_markup=reply_markup
            )
        else:
            # Regular text message - edit existing message
            await query.edit_message_text(consent_text, reply_markup=reply_markup)
    
    async def handle_consent_yes(self, query, context):
        """User agreed to data processing"""
        user = query.from_user
        
        # Force reload data to get the latest user data
        self.data_manager.reload_data()
        
        # Small delay to ensure file is written
        import time
        time.sleep(0.1)
        
        # Check if user already exists in our database
        existing_user_data = self.data_manager.get_user_data(user.id)
        
        # Debug logging
        logger.info(f"User {user.id} existing data: {existing_user_data}")
        
        # Check if user has phone number (either in data or directly in user_data)
        has_phone = False
        if existing_user_data:
            # Check in the data object
            if existing_user_data.get("data", {}).get("phone"):
                has_phone = True
                logger.info(f"User {user.id} has phone in data: {existing_user_data.get('data', {}).get('phone')}")
            # Also check if phone is directly in user_data (for backward compatibility)
            elif existing_user_data.get("phone"):
                has_phone = True
                logger.info(f"User {user.id} has phone directly: {existing_user_data.get('phone')}")
        
        logger.info(f"User {user.id} has_phone: {has_phone}")
        
        if has_phone:
            # User already exists with phone number - go directly to main menu
            await query.edit_message_text(
                "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –Ω–∞—à–µ–π –±–∞–∑–µ."
            )
            
            # Send main menu directly
            keyboard = [
                [InlineKeyboardButton("–ü–æ–ª–µ–∑–Ω—ã–µ —Ñ–∞–π–ª—ã", callback_data="useful_files")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await context.bot.send_message(
                chat_id=query.from_user.id,
                text="–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                reply_markup=reply_markup
            )
        else:
            # New user or user without phone - request contact information
            await query.edit_message_text(
                "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º' –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö:"
            )
            
            # Then send a new message with the contact keyboard
            keyboard = [
                [KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
            
            await context.bot.send_message(
                chat_id=query.from_user.id,
                text="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=reply_markup
            )
    
    async def handle_consent_no(self, query, context):
        """User declined data processing"""
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="consent_yes")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "–ü–æ–Ω—è—Ç–Ω–æ! –ë–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –º—ã –Ω–µ –º–æ–∂–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.\n"
            "–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ–∑–∂–µ.",
            reply_markup=reply_markup
        )
    

    
    async def handle_phone_shared(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle when user shares their contact (includes all data)"""
        if update.message.contact:
            user = update.message.from_user
            contact = update.message.contact
            phone = contact.phone_number
            name = contact.first_name or contact.full_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            
            # Collect all user data at once
            user_data = {
                "telegram_id": user.id,
                "name": name,
                "username": user.username,
                "phone": phone
            }
            
            # Save all data to JSON
            if self.data_manager.save_user_data(user.id, user_data):
                # Remove the contact sharing keyboard by sending a message with remove_keyboard
                from telegram import ReplyKeyboardRemove
                await update.message.reply_text(
                    f"–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
                    f"–ò–º—è: {name}\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                    f"Username: {user.username}\n\n"
                    f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!",
                    reply_markup=ReplyKeyboardRemove()
                )
                
                # Send main menu directly
                keyboard = [
                    [InlineKeyboardButton("–ü–æ–ª–µ–∑–Ω—ã–µ —Ñ–∞–π–ª—ã", callback_data="useful_files")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await context.bot.send_message(
                    chat_id=update.message.chat_id,
                    text="–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                    reply_markup=reply_markup
                )
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    

    

    
<<<<<<< HEAD
 
=======
    async def show_user_data(self, query, context):
        """Show collected user data (for testing)"""
        user_id = query.from_user.id
        user_data = self.data_manager.get_user_data(user_id)
        
        if user_data:
            data = user_data["data"]
            stats = self.data_manager.get_stats()
            
            message = f"""
üìä –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:
–ò–º—è: {data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}
Username: {data.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω')}
–î–∞—Ç–∞ —Å–æ–≥–ª–∞—Å–∏—è: {user_data.get('consent_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}

üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
–°–æ–≥–ª–∞—Å–∏–ª–∏—Å—å: {stats['users_with_consent']}
–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≥–ª–∞—Å–∏—è: {stats['consent_rate']:.1f}%
            """
        else:
            message = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
        
        keyboard = [
            [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, reply_markup=reply_markup) 
>>>>>>> 66a159f1d1fd67fd9a0bc573f269d1f9c70a8801
