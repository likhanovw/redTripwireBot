import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

logger = logging.getLogger(__name__)

class ExtendedUseRequestHandler:
    """Handler for extended use requests including audit functionality"""
    
    def __init__(self, pdf_handler):
        self.pdf_handler = pdf_handler
    
    async def handle_has_product(self, query, context):
        """Handle '–ï—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç' selection"""
        keyboard = [
            [InlineKeyboardButton("–°–≤–æ—è –∫–æ–º–∞–Ω–¥–∞", callback_data="own_team")],
            [InlineKeyboardButton("–ê—É—Ç—Å—Ç–∞—Ñ—Ñ", callback_data="outstaff")],
            [InlineKeyboardButton("–ê—É—Ç—Å–æ—Ä—Å", callback_data="outsource")],
            [InlineKeyboardButton("–ù–µ—Ç –Ω–∏–∫–æ–≥–æ", callback_data="no_team")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚úÖ –ï—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç: –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é", reply_markup=reply_markup)
    
    async def handle_no_product(self, query, context):
        """Handle '–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∞' selection"""
        keyboard = [
            [InlineKeyboardButton("–ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∞–º–∏", callback_data="fully_own")],
            [InlineKeyboardButton("–°–∞–º–∏ + —É—Å–∏–ª–µ–Ω–∏–µ –∏–∑–≤–Ω–µ", callback_data="own_plus_external")],
            [InlineKeyboardButton("–ó–∞–∫–∞–∑–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", callback_data="custom_development")],
            [InlineKeyboardButton("–ü–æ–∫—É–ø–∫–∞ –≥–æ—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–µ–π", callback_data="buy_customize")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚ùå –ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é", reply_markup=reply_markup)
    
    async def handle_own_team(self, query, context):
        """Handle '–°–≤–æ—è –∫–æ–º–∞–Ω–¥–∞' selection"""
        keyboard = [
            [InlineKeyboardButton("–ê—É–¥–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ + —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø—Ä–æ–¥–∂–µ–∫—Ç–∞", callback_data="audit_processes")],
            [InlineKeyboardButton("–ê—É–¥–∏—Ç –ø—Ä–æ–¥—É–∫—Ç–∞ + —Ä–µ–∫–æ–º–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–∫—Ç–∞", callback_data="audit_product")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_has_product")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üë• –°–≤–æ—è –∫–æ–º–∞–Ω–¥–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é", reply_markup=reply_markup)
    
    async def handle_outstaff(self, query, context):
        """Handle '–ê—É—Ç—Å—Ç–∞—Ñ—Ñ' selection"""
        keyboard = [
            [InlineKeyboardButton("–∞—É–¥–∏—Ç —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ + —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–æ–¥–∂–µ–∫—Ç–∞ –∏/–∏–ª–∏ HR", callback_data="audit_outstaff_specialists")],
            [InlineKeyboardButton("–ê—É–¥–∏—Ç –ø—Ä–æ–¥—É–∫—Ç–∞ + —Ä–µ–∫–æ–º–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–∫—Ç–∞", callback_data="audit_product")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_has_product")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üë®‚Äçüíº –ê—É—Ç—Å—Ç–∞—Ñ—Ñ: –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é", reply_markup=reply_markup)
    
    async def handle_other_team_options(self, query, context):
        """Handle other team options (outsource, no_team)"""
        responses = {
            "outsource": "üè¢ –ê—É—Ç—Å–æ—Ä—Å: –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é",
            "no_team": "üö´ –ù–µ—Ç –Ω–∏–∫–æ–≥–æ: –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é"
        }
        await query.edit_message_text(responses[query.data])
    
    async def handle_back_to_has_product(self, query, context):
        """Handle '–ù–∞–∑–∞–¥' to '–ï—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç' menu"""
        keyboard = [
            [InlineKeyboardButton("–°–≤–æ—è –∫–æ–º–∞–Ω–¥–∞", callback_data="own_team")],
            [InlineKeyboardButton("–ê—É—Ç—Å—Ç–∞—Ñ—Ñ", callback_data="outstaff")],
            [InlineKeyboardButton("–ê—É—Ç—Å–æ—Ä—Å", callback_data="outsource")],
            [InlineKeyboardButton("–ù–µ—Ç –Ω–∏–∫–æ–≥–æ", callback_data="no_team")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚úÖ –ï—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç: –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é", reply_markup=reply_markup)
    
    async def handle_audit_options(self, query, context):
        """Handle audit options - send PDF files"""
        pdf_files = {
            "audit_processes": "audit_processes.pdf",
            "audit_product": "audit_product.pdf",
            "audit_outstaff_specialists": "audit_outstaff_specialists.pdf"
        }
        
        if query.data in pdf_files:
            filename = pdf_files[query.data]
            try:
                await self.pdf_handler.send_pdf(query, context, filename)
            except Exception as e:
                logger.error(f"Error sending PDF {filename}: {e}")
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {filename}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def handle_no_product_options(self, query, context):
        """Handle no product options"""
        responses = {
            "fully_own": "üõ†Ô∏è –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–∞–º–∏: –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é",
            "own_plus_external": "üîß –°–∞–º–∏ + —É—Å–∏–ª–µ–Ω–∏–µ –∏–∑–≤–Ω–µ: –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é",
            "custom_development": "üìã –ó–∞–∫–∞–∑–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é",
            "buy_customize": "üõí –ü–æ–∫—É–ø–∫–∞ –≥–æ—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–µ–π: –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é"
        }
        await query.edit_message_text(responses[query.data])
    
    async def handle_back_to_start(self, query, context):
        """Handle '–ù–∞–∑–∞–¥' to main menu"""
        keyboard = [
            [InlineKeyboardButton("–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—á–µ—Ç", callback_data="calculation")],
            [InlineKeyboardButton("–ó–∞—è–≤–∫–∞ –Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫—É—é —Å–µ—Å—Å–∏—é", callback_data="strategic")],
            [InlineKeyboardButton("–ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="materials")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # If message has a document, send new message. Otherwise, edit existing message
        if query.message.document:
            # PDF message - send new message
            await context.bot.send_message(
                chat_id=query.from_user.id,
                text="–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                reply_markup=reply_markup
            )
        else:
            # Regular text message - edit existing message
            await query.edit_message_text("–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", reply_markup=reply_markup) 